export class Quad{constructor(t,i,s,e){this.p1=t,this.p2=i,this.p3=s,this.p4=e}rotate(t){this.p1.rotate(t),this.p2.rotate(t),this.p3.rotate(t),this.p4.rotate(t)}rotateOff(t,i){this.p1.sub(i).rotate(t).add(i),this.p2.sub(i).rotate(t).add(i),this.p3.sub(i).rotate(t).add(i),this.p4.sub(i).rotate(t).add(i)}}export class Vector{constructor(t,i,s=0,e=0,r=0){this.x=t,this.y=i,this.z=s,this.u=e,this.v=r}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y);return this.x/=t,this.y/=t,this}rotate(t){let i=this.x*Math.cos(t)-this.y*Math.sin(t),s=this.x*Math.sin(t)+this.y*Math.cos(t);return this.x=i,this.y=s,this}clone(){return new Vector(this.x,this.y,this.z,this.u,this.v)}heading(){return Math.atan2(this.y,this.x)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}multiplyScalar(t){return this.x*=t,this.y*=t,this}scale(t){return this.x*=t,this.y*=t,this}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}distance(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))}}let PERLIN_YWRAPB=4,PERLIN_YWRAP=16,PERLIN_ZWRAPB=8,PERLIN_ZWRAP=256,PERLIN_SIZE=4095,perlin_octaves=4,perlin_amp_falloff=.5,scaled_cosine=t=>.5*(1-Math.cos(t*Math.PI)),perlin;export function noise(t,i=0,s=0){if(null==perlin){perlin=Array(4096);for(let e=0;e<4096;e++)perlin[e]=$fx.rand()}t<0&&(t=-t),i<0&&(i=-i),s<0&&(s=-s);let r=Math.floor(t),h=Math.floor(i),n=Math.floor(s),l=t-r,o=i-h,a=s-n,p,$,c=0,u=.5,d,x,y;for(let _=0;_<perlin_octaves;_++){let f=r+(h<<4)+(n<<8);p=scaled_cosine(l),$=scaled_cosine(o),d=perlin[4095&f],d+=p*(perlin[f+1&4095]-d),x=perlin[f+16&4095],x+=p*(perlin[f+16+1&4095]-x),d+=$*(x-d),f+=256,x=perlin[4095&f],x+=p*(perlin[f+1&4095]-x),y=perlin[f+16&4095],y+=p*(perlin[f+16+1&4095]-y),x+=$*(y-x),d+=scaled_cosine(a)*(x-d),c+=d*u,u*=perlin_amp_falloff,r<<=1,h<<=1,o*=2,n<<=1,a*=2,(l*=2)>=1&&(r++,l--),o>=1&&(h++,o--),a>=1&&(n++,a--)}return c}export function noiseDetail(t,i){t>0&&(perlin_octaves=t),i>0&&(perlin_amp_falloff=i)}export function noiseSeed(t){let i,s,e={setSeed(t){s=i=(null==t?4294967296*$fx.rand():t)>>>0},getSeed:()=>i,rand:()=>(s=(1664525*s+1013904223)%4294967296)/4294967296};e.setSeed(t),perlin=Array(4096);for(let r=0;r<4096;r++)perlin[r]=e.rand()}